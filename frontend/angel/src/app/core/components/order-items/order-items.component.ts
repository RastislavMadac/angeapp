import { Component, OnInit, Output, Input, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { OrderInterface } from '../../interface/order.interface';
import { OrderItemInterface } from '../../interface/order-item.interface';

import { OrderService } from '../../servicies/order.service';
import { debounceTime, distinctUntilChanged, switchMap, catchError, of } from 'rxjs';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { OrdersCustomersComponent } from '../orders-customers/orders-customers.component';
import { CustomersInterface } from '../../interface/customer.interface';
import { NavbarComponent } from '../navbar/navbar.component';
import { DeleteService } from '../../servicies/delete.service';

@Component({
  selector: 'app-order-items',
  standalone: true,
  imports: [CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatButtonModule,
    OrdersCustomersComponent,
    NavbarComponent],
  templateUrl: './order-items.component.html',
  styleUrls: ['./order-items.component.css']
})
export class OrderItemsComponent implements OnInit, OnChanges {
  @Output() close = new EventEmitter<void>();               // üîπ Event, ktor√Ω ozn√°mi rodiƒçovi, ≈æe sa m√° modal zavrie≈•
  @Input() order: OrderInterface | null = null;             // üîπ Aktu√°lna objedn√°vka, ktor√∫ editujeme
  @Input() items: OrderItemInterface[] = [];                // üîπ Polo≈æky objedn√°vky (riadky s produktmi)
  @Output() updated = new EventEmitter<OrderInterface>();   // üîπ Event, ktor√Ωm posielame rodiƒçovi aktualizovan√∫ objedn√°vku
  orderForm!: FormGroup;                                    // üîπ Reactive Form pre z√°kladn√© √∫daje objedn√°vky
  itemsForm!: FormGroup;                                    // üîπ Reactive Form pre polo≈æky objedn√°vky (obsahuje FormArray)
  showModal = false;
  constructor(private fb: FormBuilder,
    private productService: OrderService,
    private deleteService: DeleteService) { } // üîπ Vstrekovanie FormBuildera a OrderService
  selectedCustomer: CustomersInterface | null = null;
  selectedItem: any = null;
  selectedItemIndex: number | null = null;


  selectItem(item: any, index: number) {
    this.selectedItem = item;
    this.selectedItemIndex = index;
    console.log("this.selectedItem", this.selectedItem);
    console.log("this.selectedItemIndex", this.selectedItemIndex);
  }


  // pri v√Ωbere z√°kazn√≠ka z modalu
  onCustomerSelected(customer: CustomersInterface) {
    this.selectedCustomer = customer;
    console.log('Vybran√Ω z√°kazn√≠k:', customer);

    // patch do formul√°ra: ID pre backend, meno pre UI
    this.orderForm.patchValue({
      customer_id: customer.id,     // toto sa po≈°le do backendu
      customer_name: customer.name,  // toto sa iba zobrazuje v inpute

    });
    console.log("customer_id vo forme =", this.orderForm.value.customer_id);
  }


  //üîπ Modal Okno
  openModal() { this.showModal = true; console.log('Modal showModal =', this.showModal); }
  closeModal() { this.showModal = false }


  // üîπ Spust√≠ sa pri prvom naƒç√≠tan√≠ komponentu
  ngOnInit(): void {
    document.body.classList.add('modal-open'); // prid√°me CSS triedu na body (aby sa zablokoval scroll pozadia)
    this.loadDetails();                        // vytvor√≠me formul√°re podƒæa aktu√°lnej objedn√°vky
    this.setupLiveProductLoading();            // nastav√≠me live vyhƒæad√°vanie produktov podƒæa k√≥du
    // Predplat√≠me sa na event z Navbar
    this.deleteService.delete$.subscribe(() => this.deleteSelectedItem());

  }

  // üîπ Reaguje na zmeny Inputov (napr. keƒè items pr√≠du oneskorene)
  ngOnChanges(changes: SimpleChanges): void {
    if (changes['items'] && !changes['items'].firstChange) {
      this.loadDetails();             // ak sa zmenia polo≈æky, znova postav√≠me formul√°re
      this.setupLiveProductLoading(); // a znovu nastav√≠me live vyhƒæad√°vanie
    }
  }

  // üîπ Vytvorenie formul√°rov pre objedn√°vku a polo≈æky
  loadDetails() {
    // FormGroup pre z√°kladn√© √∫daje objedn√°vky
    this.orderForm = this.fb.group({
      order_number: [this.order?.order_number ?? '', Validators.required], // ƒç√≠slo objedn√°vky (povinn√©)
      customer_id: [this.order?.customer_id ?? null, Validators.required],         // z√°kazn√≠k (povinn√©)
      customer_name: [this.order?.customer ?? '', Validators.required],         // z√°kazn√≠k (povinn√©)
      status: [this.order?.status ?? 'pending'],                           // stav objedn√°vky (default = pending)
      total_price: [this.order?.total_price ?? 0, Validators.min(0)]       // celkov√° cena (nesmie by≈• < 0)
    });

    // FormArray pre polo≈æky objedn√°vky
    this.itemsForm = this.fb.group({
      items: this.fb.array(
        this.items.map(item =>
          this.fb.group({
            order_item_id: [item.id],                    // ID riadku objedn√°vky (DB ID polo≈æky)
            product_db_id: [item.product_id],            // intern√© DB ID produktu
            product_code: [item.product_code || ''],     // k√≥d produktu (pou≈æ√≠va sa na vyhƒæadanie)
            product: [item.product || '', Validators.required], // n√°zov produktu (povinn√Ω)
            quantity: [item.quantity, [Validators.required, Validators.min(1)]], // mno≈æstvo (min. 1)
            price: [item.price, [Validators.required, Validators.min(0)]]        // cena (min. 0)
          })
        )
      )
    });
    // üîπ Live update celkovej ceny pri zmene mno≈æstva alebo ceny
    this.itemsArray.controls.forEach(itemCtrl => {
      itemCtrl.get('quantity')?.valueChanges.subscribe(() => this.updateTotalPrice());
      itemCtrl.get('price')?.valueChanges.subscribe(() => this.updateTotalPrice());
    });
    // spoƒç√≠tame total_price aj po naƒç√≠tan√≠
    this.updateTotalPrice();
  }

  // üîπ Getter na FormArray polo≈æiek (zjednodu≈°√≠ pr√≠stup k itemsForm.items)
  get itemsArray(): FormArray {
    return this.itemsForm.get('items') as FormArray;
  }

  // üîπ Ulo≈æenie zmien objedn√°vky a polo≈æiek (PATCH request)

  // PATCH objedn√°vky
  saveItems(): void {
    console.log("SAVEITEMS SPUSTENA");
    console.log('Order ID:', this.order?.id);

    // Debug pre formy
    console.log("orderForm.valid =", this.orderForm.valid, "orderForm.value =", this.orderForm.value);
    console.log("itemsForm.valid =", this.itemsForm.valid, "itemsForm.value =", this.itemsForm.value);

    // Kontrola, ƒçi kontrola customer_id v√¥bec existuje
    const customerIdControl = this.orderForm.get('customer_id');
    console.log("customer_id control exists?", !!customerIdControl);
    console.log("customer_id value =", customerIdControl?.value, "type =", typeof customerIdControl?.value);

    // fallback: ak je customer_id null/"" ‚Üí vezmi p√¥vodn√Ω z this.order
    const safeCustomerId = this.orderForm.value.customer_id ?? this.order?.customer_id;

    // payload pre PATCH
    const updatedOrder = {
      status: this.orderForm.value.status,
      customer_id: safeCustomerId,
      total_price: this.orderForm.value.total_price
    };

    // premapujeme polo≈æky
    const updatedItems = this.itemsForm.value.items.map((item: any) => ({
      id: item.order_item_id,
      product_id: item.product_db_id,
      quantity: item.quantity,
      price: item.price
    }));

    const payload = {
      ...updatedOrder,
      items: updatedItems
    };

    console.log("PATCH payload (to be sent):", payload);

    if (this.order?.id) {
      this.productService.updateOrder(this.order.id, payload).subscribe({
        next: (res) => {
          console.log('‚úÖ Objedn√°vka aktualizovan√°:', res);
          this.updated.emit(res);
          this.itemsForm.markAsPristine();
          this.orderForm.markAsPristine();
          this.close.emit();
        },
        error: (err) => {
          console.error('‚ùå Chyba pri ukladan√≠ objedn√°vky:', err);
        }
      });
    }
  }


  // üîπ Zavretie modalu (emitne close event)
  onClose() {
    this.close.emit();
  }

  // üîπ Nastav√≠ live vyhƒæad√°vanie produktov podƒæa product_code
  setupLiveProductLoading() {
    if (!this.itemsArray) return;

    // Prejdeme ka≈æd√∫ polo≈æku v poli
    this.itemsArray.controls.forEach(itemCtrl => {
      const productCodeCtrl = itemCtrl.get('product_code'); // kontrolka pre product_code
      if (!productCodeCtrl) return;

      productCodeCtrl.valueChanges
        .pipe(
          debounceTime(300),        // poƒçk√°me 300ms po poslednom p√≠san√≠
          distinctUntilChanged(),   // spust√≠ sa iba ak sa hodnota zmen√≠
          switchMap(code => {
            if (!code) {
              // ak je pole pr√°zdne ‚Üí resetujeme produkt
              itemCtrl.patchValue({ product: '', product_db_id: null, price: 0 });
              return of(null);
            }
            // inak sk√∫≈°ame naƒç√≠ta≈• produkt z backendu podƒæa k√≥du
            return this.productService.getProductByCode(code).pipe(
              catchError(() => {
                // ak produkt neexistuje ‚Üí resetujeme hodnoty
                itemCtrl.patchValue({ product: '', product_db_id: null, price: 0 });
                return of(null);
              })
            );
          })
        )
        .subscribe(product => {
          // ak API vr√°ti platn√Ω produkt ‚Üí dopln√≠me hodnoty
          if (product && product.id) {
            itemCtrl.patchValue({
              product_db_id: product.id,
              product: product.name,
              price: product.price
            });
          }
        });
    });
  }

  updateTotalPrice() {
    const total = this.itemsArray.controls.reduce((sum, itemCtrl) => {
      const quantity = itemCtrl.get('quantity')?.value || 0;
      const price = itemCtrl.get('price')?.value || 0;
      return sum + quantity * price;
    }, 0);
    this.orderForm.patchValue({ total_price: total }, { emitEvent: false });
  }

  deleteSelectedItem() {
    if (this.selectedItemIndex !== null) {
      this.itemsArray.removeAt(this.selectedItemIndex);
      this.selectedItem = null;
      this.selectedItemIndex = null;
    }
  }


}
